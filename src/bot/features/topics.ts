import type { Context } from "@/bot/context.js";

import { isAdmin } from "@/bot/filters/is-admin.js";
import { logHandle } from "@/bot/helpers/logging.js";
import prisma from "@/lib/prisma.js";
import { Composer, InlineKeyboard } from "grammy";

import { CONVERSATIONS } from "../constants.js";
import { chunk } from "../helpers/keyboard.js";
import {
  createTopicAddKeyboard,
  createTopicDeleteKeyboard,
} from "../keyboards/index.js";

const composer = new Composer<Context>();

const feature = composer.chatType("private").filter(isAdmin);

feature.hears("–î–æ–±–∞–≤–∏—Ç—å", logHandle("topic-create"), async (ctx) => {
  await ctx.conversation.enter(CONVERSATIONS.ADD_TOPIC);
});

feature.callbackQuery(
  "add_topic",
  logHandle("topic-create-callback"),
  async (ctx) => {
    await ctx.conversation.enter(CONVERSATIONS.ADD_TOPIC);
  },
);

feature.callbackQuery(/topic_\d+/, async (ctx) => {
  const topicId = Number(ctx.callbackQuery.data.slice(6));
  const topic = await prisma.topic.findUnique({
    where: {
      id: topicId,
    },
  });

  if (!topic) {
    return await ctx.answerCallbackQuery({
      cache_time: 10,
      show_alert: true,
      text: "–¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
    });
  }

  await ctx.reply(`üìí –¢–µ–º–∞—Ç–∏–∫–∞: <b>${topic.name}</b>

üü† <b>–§–∏–ª—å—Ç—Ä –¥–æ–º–µ–Ω–æ–≤:</b> <code>${topic.domainRegex}</code>`);

  await ctx.reply(
    `üü¢ <b>–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> <code>${topic.contentRegex}</code>`,
    {
      reply_markup: createTopicDeleteKeyboard(topic.id),
    },
  );

  await ctx.answerCallbackQuery();
});

feature.callbackQuery(/delete_\d+/, async (ctx) => {
  const topicId = Number(ctx.callbackQuery.data.slice(7));

  try {
    const topic = await prisma.topic.delete({
      where: {
        id: topicId,
      },
    });
    await ctx.reply(`–¢–µ–º–∞—Ç–∏–∫–∞ <b>${topic.name}</b> —É–¥–∞–ª–µ–Ω–∞!`);
    await ctx.editMessageReplyMarkup();
    await ctx.answerCallbackQuery();
  } catch (error) {
    ctx.logger.error(error);

    return await ctx.answerCallbackQuery({
      cache_time: 10,
      show_alert: true,
      text: "–¢–µ–º–∞—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
    });
  }
});

feature.hears("üìí –¢–µ–º–∞—Ç–∏–∫–∏", logHandle("topic-create"), async (ctx) => {
  const topics = await prisma?.topic.findMany();

  if (!topics || topics.length === 0) {
    await ctx.reply("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤–∏—Ç—å?", {
      reply_markup: createTopicAddKeyboard(),
    });
    return;
  }

  const keyboard = InlineKeyboard.from([
    ...chunk(
      topics.map((topic) => ({
        text: topic.name,
        callback_data: `topic_${topic.id}`,
      })),
      2,
    ),
    [
      {
        text: "–î–æ–±–∞–≤–∏—Ç—å",
        callback_data: "add_topic",
      },
    ],
  ]);

  return ctx.reply("–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫:", {
    reply_markup: keyboard,
  });
});

export { composer as topicsFeature };
